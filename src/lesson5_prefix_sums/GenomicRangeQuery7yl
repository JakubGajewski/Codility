import java.util.*;

class Solution {
    public int[] solution(String S, int[] P, int[] Q) {
        int[] result = new int[P.length];
        char[] stringAsChars = S.toCharArray();
        int[] prefixSumLeft = new int[S.length()];
        int[] prefixSumRight = new int[S.length()];


        int currentMin = 4;
        for (int i = 0; i < stringAsChars.length; i++) {
            int current = getValueOfLetter(stringAsChars[i]);
            if (current < currentMin) {
                currentMin = current;
            }
            prefixSumLeft[i] = currentMin;
        }
        currentMin = 4;
        for (int i = stringAsChars.length - 1; i >=0; i--) {
            int current = getValueOfLetter(stringAsChars[i]);
            if (current < currentMin) {
                currentMin = current;
            }
            prefixSumRight[i] = currentMin;
        }

        for (int i = 0; i < P.length; i++) {
            int partialResult = -1000;
            int firstMin = prefixSumLeft[Q[i]];
            int firstMax = prefixSumLeft[P[i]];
            int secondMin = prefixSumRight[P[i]];
            int secondMax = prefixSumRight[Q[i]];
            boolean firstChanged = firstMin != firstMax;
            boolean secondChanged = secondMin != secondMax;

            if (firstChanged || secondChanged) {
                if (firstChanged && secondChanged) {
                    partialResult = firstMin < secondMin ? firstMin : secondMin;
                }
                if (!secondChanged) {
                    partialResult = firstMin;
                } 
                if (!firstChanged) {
                    partialResult = secondMin;
                }
            } else {

                    int min = 4;
                    for (int j = P[i]; j <= Q[i]; j++) {
                        int current = getValueOfLetter(stringAsChars[j]);

                        if (min > current) {
                            min = current;
                        }
                    }

                    partialResult = min;
                
            }
            result[i] = partialResult;
        }
        return result;
    }
    private int[] getAsIntArray(String s) {
        int[] result = new int[s.length()];
        char[] stringAsChars = s.toCharArray();
        for (int i = 0; i < s.length(); i++) {
            result[i] = getValueOfLetter(stringAsChars[i]);
        }
        return result;
    }
    private int getValueOfLetter(char letter) {
        switch (letter) {
            case 'A':
                return 1;
            case 'C':
                return 2;
            case 'G':
                return 3;
            case 'T':
                return 4;
        }
        return -1;
    }
}
