import java.math.*;
import java.util.*;
//Let's try on BigDecimals...
class Solution {
    public int solution(int[] A) {        
        if (A.length == 2) {
            return 0;
        }

        int sliceOfTwoStartingIndex = 0;
        BigDecimal sliceOfTwoMinAvg = getAvg(new BigDecimal(A[0]), new BigDecimal(A[1]));

        int sliceOfThreeStartingIndex = 0;
        BigDecimal sliceOfThreeMinAvg = getAvg(new BigDecimal(A[0]), new BigDecimal(A[1]), new BigDecimal(A[2]));

        BigDecimal minAvg = sliceOfTwoMinAvg.compareTo(sliceOfThreeMinAvg) < 0 ? sliceOfTwoMinAvg : sliceOfThreeMinAvg;
        int minAvgIndex = 0;

        for (int i = 0; i <= A.length - 3; i++) {
            BigDecimal sliceOf3Avg = getAvg(new BigDecimal(A[i]), new BigDecimal(i+1), new BigDecimal(A[i+2]));
            if (sliceOf3Avg.compareTo(minAvg) < 0) {
                minAvg = sliceOf3Avg;
                minAvgIndex = i;
            }

            BigDecimal sliceOf2Avg = getAvg(new BigDecimal(A[i]), new BigDecimal(i+1));
            if (sliceOf2Avg.compareTo(minAvg) < 0) {
                minAvg = sliceOf2Avg;
                minAvgIndex = i;
            }
        }

        BigDecimal sliceOf2Avg = getAvg(new BigDecimal(A[A.length-2]), new BigDecimal(A[A.length-1]));

        if (sliceOf2Avg.compareTo(minAvg) < 0) {
            minAvg = sliceOf2Avg;
            minAvgIndex = A.length -2;
        }
        return minAvgIndex;
    }
    
    
    private BigDecimal getAvg(BigDecimal... dbs) {
        BigDecimal sum = BigDecimal.ZERO;
        for (int i = 0; i < dbs.length; i++) {
            sum = sum.add(dbs[i]);
        }
        return sum.divide(new BigDecimal(3), RoundingMode.HALF_UP);
    }
}
